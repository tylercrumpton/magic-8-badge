diff --git a/ports/broadcom/firmware b/ports/broadcom/firmware
--- a/ports/broadcom/firmware
+++ b/ports/broadcom/firmware
@@ -1 +1 @@
-Subproject commit bf96d0eda5952595d717fedb797aeb168483e9fa
+Subproject commit bf96d0eda5952595d717fedb797aeb168483e9fa-dirty
diff --git a/ports/raspberrypi/common-hal/busio/I2C.c b/ports/raspberrypi/common-hal/busio/I2C.c
index c68499591c..1870366c47 100644
--- a/ports/raspberrypi/common-hal/busio/I2C.c
+++ b/ports/raspberrypi/common-hal/busio/I2C.c
@@ -77,27 +77,27 @@ void common_hal_busio_i2c_construct(busio_i2c_obj_t *self,
 
     #if CIRCUITPY_REQUIRE_I2C_PULLUPS
     // Test that the pins are in a high state. (Hopefully indicating they are pulled up.)
-    gpio_set_function(sda->number, GPIO_FUNC_SIO);
-    gpio_set_function(scl->number, GPIO_FUNC_SIO);
-    gpio_set_dir(sda->number, GPIO_IN);
-    gpio_set_dir(scl->number, GPIO_IN);
+    // gpio_set_function(sda->number, GPIO_FUNC_SIO);
+    // gpio_set_function(scl->number, GPIO_FUNC_SIO);
+    // gpio_set_dir(sda->number, GPIO_IN);
+    // gpio_set_dir(scl->number, GPIO_IN);
 
-    gpio_set_pulls(sda->number, false, true);
-    gpio_set_pulls(scl->number, false, true);
+    // gpio_set_pulls(sda->number, false, true);
+    // gpio_set_pulls(scl->number, false, true);
 
-    common_hal_mcu_delay_us(10);
+    // common_hal_mcu_delay_us(10);
 
-    gpio_set_pulls(sda->number, false, false);
-    gpio_set_pulls(scl->number, false, false);
+    // gpio_set_pulls(sda->number, false, false);
+    // gpio_set_pulls(scl->number, false, false);
 
-    // We must pull up within 3us to achieve 400khz.
-    common_hal_mcu_delay_us(3);
+    // // We must pull up within 3us to achieve 400khz.
+    // common_hal_mcu_delay_us(3);
 
-    if (!gpio_get(sda->number) || !gpio_get(scl->number)) {
-        reset_pin_number(sda->number);
-        reset_pin_number(scl->number);
-        mp_raise_RuntimeError(translate("No pull up found on SDA or SCL; check your wiring"));
-    }
+    // if (!gpio_get(sda->number) || !gpio_get(scl->number)) {
+    //     reset_pin_number(sda->number);
+    //     reset_pin_number(scl->number);
+    //     mp_raise_RuntimeError(translate("No pull up found on SDA or SCL; check your wiring"));
+    // }
     #endif
 
     // Create a bitbangio.I2C object to do 0 byte writes.
@@ -113,8 +113,8 @@ void common_hal_busio_i2c_construct(busio_i2c_obj_t *self,
     //
     // Do not use the default supplied clock stretching timeout here.
     // It is too short for some devices. Use the busio timeout instead.
-    shared_module_bitbangio_i2c_construct(&self->bitbangio_i2c, scl, sda,
-        frequency, BUS_TIMEOUT_US);
+    // shared_module_bitbangio_i2c_construct(&self->bitbangio_i2c, scl, sda,
+    //     frequency, BUS_TIMEOUT_US);
 
     self->baudrate = i2c_init(self->peripheral, frequency);
 
@@ -125,6 +125,9 @@ void common_hal_busio_i2c_construct(busio_i2c_obj_t *self,
 
     gpio_set_function(self->scl_pin, GPIO_FUNC_I2C);
     gpio_set_function(self->sda_pin, GPIO_FUNC_I2C);
+
+    gpio_set_pulls(self->scl_pin, true, false);
+    gpio_set_pulls(self->sda_pin, true, false);
 }
 
 bool common_hal_busio_i2c_deinited(busio_i2c_obj_t *self) {
@@ -168,27 +171,27 @@ void common_hal_busio_i2c_unlock(busio_i2c_obj_t *self) {
 
 STATIC uint8_t _common_hal_busio_i2c_write(busio_i2c_obj_t *self, uint16_t addr,
     const uint8_t *data, size_t len, bool transmit_stop_bit) {
-    if (len == 0) {
-        // The RP2040 I2C peripheral will not perform 0 byte writes.
-        // So use bitbangio.I2C to do the write.
-
-        gpio_set_function(self->scl_pin, GPIO_FUNC_SIO);
-        gpio_set_function(self->sda_pin, GPIO_FUNC_SIO);
-        gpio_set_dir(self->scl_pin, GPIO_IN);
-        gpio_set_dir(self->sda_pin, GPIO_IN);
-        gpio_put(self->scl_pin, false);
-        gpio_put(self->sda_pin, false);
-
-        uint8_t status = shared_module_bitbangio_i2c_write(&self->bitbangio_i2c,
-            addr, data, len, transmit_stop_bit);
-
-        // The pins must be set back to GPIO_FUNC_I2C in the order given here,
-        // SCL first, otherwise reads will hang.
-        gpio_set_function(self->scl_pin, GPIO_FUNC_I2C);
-        gpio_set_function(self->sda_pin, GPIO_FUNC_I2C);
-
-        return status;
-    }
+    // if (len == 0) {
+    //     // The RP2040 I2C peripheral will not perform 0 byte writes.
+    //     // So use bitbangio.I2C to do the write.
+
+    //     gpio_set_function(self->scl_pin, GPIO_FUNC_SIO);
+    //     gpio_set_function(self->sda_pin, GPIO_FUNC_SIO);
+    //     gpio_set_dir(self->scl_pin, GPIO_IN);
+    //     gpio_set_dir(self->sda_pin, GPIO_IN);
+    //     gpio_put(self->scl_pin, false);
+    //     gpio_put(self->sda_pin, false);
+
+    //     uint8_t status = shared_module_bitbangio_i2c_write(&self->bitbangio_i2c,
+    //         addr, data, len, transmit_stop_bit);
+
+    //     // The pins must be set back to GPIO_FUNC_I2C in the order given here,
+    //     // SCL first, otherwise reads will hang.
+    //     gpio_set_function(self->scl_pin, GPIO_FUNC_I2C);
+    //     gpio_set_function(self->sda_pin, GPIO_FUNC_I2C);
+
+    //     return status;
+    // }
 
     size_t result = i2c_write_timeout_us(self->peripheral, addr, data, len, !transmit_stop_bit, BUS_TIMEOUT_US);
     if (result == len) {
